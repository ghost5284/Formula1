{
	"name": "pip_ingest_all_API_data",
	"properties": {
		"activities": [
			{
				"name": "Copy_seasons_data",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "act_lookup_metadata_enter",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "HttpReadSettings",
							"requestMethod": "GET"
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "seasons_data",
						"type": "DatasetReference",
						"parameters": {
							"base_url": "http://ergast.com/api/f1/",
							"relative_url": "seasons.json"
						}
					}
				],
				"outputs": [
					{
						"referenceName": "seasosn_sink",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "act_lookup_seasons_read",
				"type": "Lookup",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Copy_seasons_data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "source_seasons",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "For_each_act_On_seasons",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "act_lookup_seasons_read",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('act_lookup_seasons_read').output.value[0].MRData.Seasontable.Seasons",
						"type": "Expression"
					},
					"batchCount": 3,
					"activities": [
						{
							"name": "Copy data_race_schedule",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "HttpReadSettings",
										"requestMethod": "GET"
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "surce_schedule_race",
									"type": "DatasetReference",
									"parameters": {
										"base_url": "http://ergast.com/api/f1/",
										"realative_url": {
											"value": "@concat(item().season,'.json')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "sink_schedule_race_Data",
									"type": "DatasetReference"
								}
							]
						}
					]
				}
			},
			{
				"name": "act_lookup_read_race_schedule",
				"type": "Lookup",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "For_each_act_On_seasons",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"wildcardFileName": "*.json",
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "source_race_schedule",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "act_for_each_race_schedule",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "act_lookup_read_race_schedule",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('act_ingest_race_result_data').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 3,
					"activities": [
						{
							"name": "act_ingest_race_result_data",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "child_pipline_",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"race_list": {
										"value": "@item().MRData.RaceTable.Races",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "act_lookup_metadata_enter",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "act_set_var_start_time",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzurePostgreSqlSource",
						"query": {
							"value": "INSERT INTO my_table.formula1_metadata\n(job_id, job_name, task_name, status, start_time)\nVALUES(\n'@{formatDateTime(variables('start_time'),'yyyyMMddHHmmss')}',\n 'pip_ingest_all_API_data', \n 'session_api',\n  'In_progress', \n  '@{variables('start_time')}');\n\n  INSERT INTO my_table.formula1_metadata\n(job_id, job_name, task_name, status, start_time)\nVALUES(\n'@{formatDateTime(variables('start_time'),'yyyyMMddHHmmss')}',\n 'pip_ingest_all_API_data', \n 'race_api',\n  'In_progress', \n  '@{variables('start_time')}');\n\n  INSERT INTO my_table.formula1_metadata\n(job_id, job_name, task_name, status, start_time)\nVALUES(\n'@{formatDateTime(variables('start_time'),'yyyyMMddHHmmss')}',\n 'pip_ingest_all_API_data', \n 'result_api',\n  'In_progress', \n  '@{variables('start_time')}');\n\n  select job_id from my_table.formula1_metadata",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzurePostgreSqlTable1",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "act_set_var_start_time",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "start_time",
					"value": {
						"value": "@utcNow('yyyy-MM-dd HH:MM:ss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "act_lookup_metadata_session_update_enter_copy1",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Copy_seasons_data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzurePostgreSqlSource",
						"query": {
							"value": "\nupdate my_table.formula1_metadata\nset status = 'sucess',\n    end_time  = '@{utcNow('yyyy-MM-dd HH:mm:ss')}' \nwhere job_id ='@{formatDateTime(variables('start_time'),'yyyyMMddHHmmss')}' and task_name ='session_api';\n\nselect job_id from my_table.formula1_metadata;",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzurePostgreSqlTable1",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "act_lookup_metadata_session_fail_enter_copy1_copy1",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Copy_seasons_data",
						"dependencyConditions": [
							"Failed",
							"Skipped"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzurePostgreSqlSource",
						"query": {
							"value": "\nupdate my_table.formula1_metadata\nset status = 'Fail',\n\t\tend_time  = '@{utcNow('yyyy-MM-dd HH:mm:ss')}'\nwhere job_id ='@{formatDateTime(variables('start_time'),'yyyyMMddHHmmss')}' and task_name ='session_api';\n\nselect job_id from my_table.formula1_metadata;",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzurePostgreSqlTable1",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			}
		],
		"variables": {
			"set_season": {
				"type": "String"
			},
			"set_round": {
				"type": "String"
			},
			"start_time": {
				"type": "String"
			},
			"set_ingest_time": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2024-04-12T11:11:47Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}